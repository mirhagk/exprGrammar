/*
 * Classic example grammar, which recognizes simple arithmetic expressions like
 * "2*(3+4)". The parser generated from this grammar then computes their value.
 */
{
  function replaceLastElse(condition, elseBranch){
      if (condition[3]==null){
          condition[3] = elseBranch;
          return condition;
      }
      condition[3] = replaceLastElse(condition[3], elseBranch);
      return condition;
  }
  function StringFlatten(arr){
     if (arr.length==0) return "";
     return arr.reduce(function(prev,cur){
        return prev+cur;
     });
  }
  function ArrayFlatten(arr){
     result =  arr.reduce(function(prev,cur){
        return prev.concat(cur);
     });
     return result.filter(function(x){return x!=null;});
  }
}
start
  = val:logical {return val;}

logical
 = left:andLogical ows "OR" ows right:logical {return ["OR", left, right];}
 / andLogical

andLogical
 = left:boolean ows "AND" ows right:andLogical {return ["AND", left, right];}
 / boolean

boolean
 = left:additive ows operator:("="/ "<>" / "<" / ">" / "IN") ows right:(boolean/additive) {return [operator, left, right];}
  / additive

additive
  = left:multiplicative "+" right:additive { return ['+', left, right]; }
  / multiplicative

multiplicative
  = ows left:primary ows "*" right:multiplicative { return ['*', left, right]; }
  / ows val:primary ows {return val;}

primary
  = integer
  / "(" val:logical")" { return val; }
  / literal
  / string
  / variable
  / functionCall
  / caseWhen

string
 = '"' [^\"] '"'

variable
 = "@" iden:identifier {return "@"+iden;}

literal
 = "null"

identifier
 = text:([a-zA-Z_0-9]*) { return StringFlatten(text);}

integer "integer"
  = digits:[0-9]+ { return parseInt(digits.join(""), 10); }

ows "optional whitespace"
 = ws* {return '';}

ws "whitespace"
 = [ \t\n]+ {return '';}

caseWhen "case statement"
 = "CASE" variable:additive branches:("WHEN" condition:additive "THEN" action:logical {return ["WHEN", condition, action];})* elseBranch:("ELSE" action:logical {return ["ELSE", action];})? "END" {return ["CASE", variable, branches.concat(elseBranch?[elseBranch]:[])];}
 / "CASE" ws branches:caseWhenIf elseBranch:("ELSE" action:logical {return action;})? "END" {return elseBranch?replaceLastElse(branches,elseBranch):branches;}

caseWhenIf "case statement"
 = "WHEN" condition:logical "THEN" action:logical ows elseif:caseWhenIf {return ["IFELSE", condition, action, elseif];}
 / "WHEN" condition:logical "THEN" action:logical {return ["IFELSE", condition, action, null];}

functionCall
 = fn:identifier "(" args:(arg:logical "," {return arg;})* argLast:logical? ")" {return [(fn||"list")].concat(args).concat(argLast?[argLast]:[]);}