@namespace exprGrammar
@classname Grammar
@using System.Linq


start <Node>
	= logical

logical <Node>
	= left:andLogical ows "OR" ows right:andLogical { new FunctionNode("OR",left,right)}
	/ andLogical

andLogical <Node>
	= left:boolean ows "AND" ows right:boolean {new FunctionNode("AND",left,right)}
	/ boolean

boolean <Node>
 = left:additive ows op:("="/ "<>" / "<" / ">" / "IN") ows right:additive { new FunctionNode(op,left,right)}
  / additive

additive <Node>
	= left:multiplicative ows "+" right:multiplicative { new FunctionNode("+",left,right)}
	/ multiplicative
  
multiplicative <Node>
	= ows left:primary ows "*" right:primary { new FunctionNode("*",left,right)}
	/ primary

ows
 = ws* {null}

ws
 = [ \t\n]+ {null}

primary <Node>
  = integer
  / "(" val:logical ")" {val}
  / literal
  / string
  / variable
  / functionCall

integer <ValueNode<int>>
	= num:([0-9]+) { new ValueNode<int>(int.Parse(Flatten(num)))}

string <ValueNode<string>>
	= "\"" text:([^"]*) { new ValueNode<string>(Flatten(text))}

literal <Node>
	= "null" {null}

variable <VariableNode>
	= "@" iden:identifier { new VariableNode(iden)}

identifier <string>
	= text:([a-zA-Z_0-9]+) {Flatten(text)}

functionCall <FunctionNode>
	= iden:identifier "(" args:((<Node> arg:logical "," {arg})*) lastArg:logical? ")" {new FunctionNode(iden,args.Concat(lastArg).ToArray())}