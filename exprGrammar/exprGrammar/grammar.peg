@namespace exprGrammar
@classname Grammar


start <Node>
	= logical

logical <Node>
	= additive

boolean <Node> -memoize
 = left:boolean ows op:("="/ "<>" / "<" / ">" / "IN") ows right:additive { new FunctionNode(op,left,right)}
  / additive

additive <Node> -memoize
	= left:additive ows "+" right:multiplicative { new FunctionNode("+",left,right)}
	/ multiplicative
  
multiplicative <Node> -memoize
	= ows left:multiplicative ows "*" right:primary { new FunctionNode("*",left,right)}
	/ primary

ows
 = ws* {null}

ws
 = [ \t\n]+ {null}

primary <Node>
  = integer
  / "(" val:logical ")" {val}
  / literal
  / string
  / variable

integer <ValueNode<int>>
	= num:([0-9]*) { new ValueNode<int>(int.Parse(Flatten(num)))}

string <ValueNode<string>>
	= "\"" text:([^"]*) { new ValueNode<string>(Flatten(text))}

literal <Node>
	= "null" {null}

variable <VariableNode>
	= "@" iden:identifier { new VariableNode(iden)}

identifier <string>
	= text:([a-zA-Z_0-9]*) {Flatten(text)}